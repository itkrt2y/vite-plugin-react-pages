var h=Object.defineProperty,d=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var p=(a,t,l)=>t in a?h(a,t,{enumerable:!0,configurable:!0,writable:!0,value:l}):a[t]=l,s=(a,t)=>{for(var l in t||(t={}))r.call(t,l)&&p(a,l,t[l]);if(o)for(var l of o(t))i.call(t,l)&&p(a,l,t[l]);return a},m=(a,t)=>d(a,g(t));var u=(a,t)=>{var l={};for(var n in a)r.call(a,n)&&t.indexOf(n)<0&&(l[n]=a[n]);if(a!=null&&o)for(var n of o(a))t.indexOf(n)<0&&i.call(a,n)&&(l[n]=a[n]);return l};import{c as e}from"./clientRender.ba417ce3.js";import{M as f}from"./theme-interface.5a3fbc40.js";const y={},b="wrapper";function c(l){var n=l,{components:a}=n,t=u(n,["components"]);return e(b,m(s(s({},y),t),{components:a,mdxType:"MDXLayout"}),e("h1",null,"Page data"),e("p",null,e("strong",{parentName:"p"},"Essentially, vite-pages is a React app framework that collect your pages data and pass them to your theme.")," So what kinds of data does it collect?"),e("p",null,"Each page consists of two kinds of data:"),e("ul",null,e("li",{parentName:"ul"},"Static data"),e("li",{parentName:"ul"},"Runtime data")),e("p",null,"Both of these page data are passed to the theme so that it can render the app."),e("blockquote",null,e("p",{parentName:"blockquote"},"Fun fact: vite-pages itself doesn't render any concrete DOM node. All DOM nodes are rendered by ",e("a",{parentName:"p",href:"/theme-customization"},"theme"),".")),e("h2",null,"Static data"),e("p",null,"Static data usually contains the matadata of a page. Static data of ",e("strong",{parentName:"p"},"all pages")," is loaded ",e("strong",{parentName:"p"},"eagerly")," when the app bootstrap, so that the theme can render a side menu or a search box with this infomation."),e("blockquote",null,e("p",{parentName:"blockquote"},"You should try to keep the static data as small as possible.")),e("p",null,"For ",e("inlineCode",{parentName:"p"},".tsx|.jsx")," pages, you can define static data with ",e("strong",{parentName:"p"},"a docblock(comment) at the top of the file"),"."),e("pre",null,e("code",{parentName:"pre",className:"language-tsx"},`/**
 * @title index page
 * @tags tag1,tag2
 */
`)),e("p",null,"This will be collected as:"),e("pre",null,e("code",{parentName:"pre",className:"language-json"},`{ "title": "index page", "tags": "tag1,tag2" }
`)),e("p",null,"For ",e("inlineCode",{parentName:"p"},".md|.mdx")," pages, you can define static data with YAML front matter:"),e("pre",null,e("code",{parentName:"pre",className:"language-md"},`---
title: my page
tags:
  - tag1
  - tag2
---
`)),e("p",null,"This will be collected as:"),e("pre",null,e("code",{parentName:"pre",className:"language-json"},`{ "title": "my page", "tags": ["tag1", "tag2"] }
`)),e("blockquote",null,e("p",{parentName:"blockquote"},"As you can see, YAML front matter can express some simple data structure(.e.g array), while a docblock's properties can only express strings. A qualified theme should understand both of these.")),e("h2",null,"Runtime data"),e("p",null,"Runtime page data is whatever value you export from a page file. It contains the actual content of the page."),e("p",null,"Most themes(.e.g ",e("a",{parentName:"p",href:"/official-theme"},"the official theme"),") ask users to ",e("inlineCode",{parentName:"p"},"export default")," a React component from each page file. But that is not a requirement from vite-pages core. We will talk about this later."),e("h2",null,"Difference"),e("p",null,"Both static data and runtime data are passed to the theme, so the theme can use them to render the app."),e("p",null,"Difference:"),e("ul",null,e("li",{parentName:"ul"},"Static data of ",e("strong",{parentName:"li"},"all pages")," is loaded ",e("strong",{parentName:"li"},"eagerly")," when the app bootstrap. So you should try to keep the static data small."),e("li",{parentName:"ul"},"Runtime data is loaded ",e("strong",{parentName:"li"},"lazily")," when user navigate to that page."),e("li",{parentName:"ul"},"The value type of static data is limited (string or simple object/array), while the value of runtime data can be any javascript value (.e.g a React component).")),e("h2",null,"How theme consume these data"),e("p",null,"As stated in ",e("a",{parentName:"p",href:"/theme-customization"},"the theme customization doc"),", a theme is a React component. It will be rendered by vite-pages core, and get useful info from props:"),e("ul",null,e("li",{parentName:"ul"},"All pages' static data"),e("li",{parentName:"ul"},"All runtime data that is already loaded"),e("li",{parentName:"ul"},"The current loading state of the app")),e("p",null,"Here is the interface of a theme:"),e(f,{mdxType:"ThemeInterface"}),e("blockquote",null,e("p",{parentName:"blockquote"},"Here is an example implementation of vite-pages theme: ",e("a",{parentName:"p",href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/theme-doc/src/index.tsx"},"vite-pages-theme-doc"),". ",e("a",{parentName:"p",href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/playground/use-theme-doc/pages/_theme.tsx"},"This fixture")," demonstrate how to use it.")),e("h2",null,"Vite-pages core doesn't care what your page data looks like"),e("p",null,"Vite-pages itself doesn't care what the page data looks like. How to interpret the page data and render the view, is totally decided by ",e("a",{parentName:"p",href:"/theme-customization"},"the theme"),'. Vite-pages just collect your pages data and pass them to the theme. This design make the vite-pages core more "simple" and make themes more powerful.'),e("p",null,"Most themes(.e.g ",e("a",{parentName:"p",href:"/official-theme"},"the official theme"),") ask users to ",e("inlineCode",{parentName:"p"},"export default")," a React component from each page file. But that is not a requirement from vite-pages core."),e("h2",null,"Advanced topic: how vite-pages represent page data internally"),e("p",null,"Internally, vite-pages stores all pages' data inside a data structure like this:"),e("pre",null,e("code",{parentName:"pre",className:"language-ts"},`interface PagesData {
  // pages are indexed by pageId which is route path like "/dir/page3"
  [pageId: string]: {
    // each page contains runtimeData and staticData
    data: {
      // the values are paths to the runtime data modules
      [key: string]: string
    }
    staticData: {
      // the values are serializable
      [key: string]: any
    }
  }
}
`)),e("h3",null,"Composed page data"),e("p",null,"You may wonder why runtimeData and staticData are maps and we use a ",e("inlineCode",{parentName:"p"},"key")," to index into them. This is because ",e("strong",{parentName:"p"},"vite-pages let users create a page with multiple data pieces that originate from multiple files.")),e("blockquote",null,e("p",{parentName:"blockquote"},"We use this feature in ",e("a",{parentName:"p",href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/create-project/template-lib/docs/vite.config.ts"},"the project scaffold"),". We use this feature to display demos from multiple files in one page. You can init this sample project ",e("a",{parentName:"p",href:"/"},"with one command")," (choose ",e("inlineCode",{parentName:"p"},"lib")," template).")),e("p",null,"Most filesystem routing mechanism out there assume that each page map to only one file. But vite-pages doesn't enforce that rule! This make page data more flexible and programable."),e("p",null,"Checkout ",e("a",{parentName:"p",href:"/advanced-fs-routing"},"the advanced-fs-routing doc")," or ",e("a",{parentName:"p",href:"/examples/component-library"},'"Example: develop a component library"')," to learn more about how to create a page with multiple data pieces that originate from multiple files."))}c.isMDXComponent=!0;var N=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:c});const k={};k.main=N;export{k as default};
